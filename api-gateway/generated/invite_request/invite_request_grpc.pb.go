// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: invite_request.proto

package invite_request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InviteRequestService_CreateInviteRequest_FullMethodName   = "/invite_request.InviteRequestService/CreateInviteRequest"
	InviteRequestService_FindAllInviteRequests_FullMethodName = "/invite_request.InviteRequestService/FindAllInviteRequests"
	InviteRequestService_FindInviteRequestById_FullMethodName = "/invite_request.InviteRequestService/FindInviteRequestById"
	InviteRequestService_UpdateInviteRequest_FullMethodName   = "/invite_request.InviteRequestService/UpdateInviteRequest"
	InviteRequestService_DeleteInviteRequest_FullMethodName   = "/invite_request.InviteRequestService/DeleteInviteRequest"
)

// InviteRequestServiceClient is the client API for InviteRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteRequestServiceClient interface {
	CreateInviteRequest(ctx context.Context, in *CreateInviteRequestRequest, opts ...grpc.CallOption) (*CreateInviteRequestResponse, error)
	FindAllInviteRequests(ctx context.Context, in *FindAllInviteRequestsRequest, opts ...grpc.CallOption) (*FindAllInviteRequestsResponse, error)
	FindInviteRequestById(ctx context.Context, in *FindInviteRequestByIdRequest, opts ...grpc.CallOption) (*FindInviteRequestByIdResponse, error)
	UpdateInviteRequest(ctx context.Context, in *UpdateInviteRequestRequest, opts ...grpc.CallOption) (*UpdateInviteRequestResponse, error)
	DeleteInviteRequest(ctx context.Context, in *DeleteInviteRequestRequest, opts ...grpc.CallOption) (*DeleteInviteRequestResponse, error)
}

type inviteRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteRequestServiceClient(cc grpc.ClientConnInterface) InviteRequestServiceClient {
	return &inviteRequestServiceClient{cc}
}

func (c *inviteRequestServiceClient) CreateInviteRequest(ctx context.Context, in *CreateInviteRequestRequest, opts ...grpc.CallOption) (*CreateInviteRequestResponse, error) {
	out := new(CreateInviteRequestResponse)
	err := c.cc.Invoke(ctx, InviteRequestService_CreateInviteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteRequestServiceClient) FindAllInviteRequests(ctx context.Context, in *FindAllInviteRequestsRequest, opts ...grpc.CallOption) (*FindAllInviteRequestsResponse, error) {
	out := new(FindAllInviteRequestsResponse)
	err := c.cc.Invoke(ctx, InviteRequestService_FindAllInviteRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteRequestServiceClient) FindInviteRequestById(ctx context.Context, in *FindInviteRequestByIdRequest, opts ...grpc.CallOption) (*FindInviteRequestByIdResponse, error) {
	out := new(FindInviteRequestByIdResponse)
	err := c.cc.Invoke(ctx, InviteRequestService_FindInviteRequestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteRequestServiceClient) UpdateInviteRequest(ctx context.Context, in *UpdateInviteRequestRequest, opts ...grpc.CallOption) (*UpdateInviteRequestResponse, error) {
	out := new(UpdateInviteRequestResponse)
	err := c.cc.Invoke(ctx, InviteRequestService_UpdateInviteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteRequestServiceClient) DeleteInviteRequest(ctx context.Context, in *DeleteInviteRequestRequest, opts ...grpc.CallOption) (*DeleteInviteRequestResponse, error) {
	out := new(DeleteInviteRequestResponse)
	err := c.cc.Invoke(ctx, InviteRequestService_DeleteInviteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteRequestServiceServer is the server API for InviteRequestService service.
// All implementations must embed UnimplementedInviteRequestServiceServer
// for forward compatibility
type InviteRequestServiceServer interface {
	CreateInviteRequest(context.Context, *CreateInviteRequestRequest) (*CreateInviteRequestResponse, error)
	FindAllInviteRequests(context.Context, *FindAllInviteRequestsRequest) (*FindAllInviteRequestsResponse, error)
	FindInviteRequestById(context.Context, *FindInviteRequestByIdRequest) (*FindInviteRequestByIdResponse, error)
	UpdateInviteRequest(context.Context, *UpdateInviteRequestRequest) (*UpdateInviteRequestResponse, error)
	DeleteInviteRequest(context.Context, *DeleteInviteRequestRequest) (*DeleteInviteRequestResponse, error)
	mustEmbedUnimplementedInviteRequestServiceServer()
}

// UnimplementedInviteRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInviteRequestServiceServer struct {
}

func (UnimplementedInviteRequestServiceServer) CreateInviteRequest(context.Context, *CreateInviteRequestRequest) (*CreateInviteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteRequest not implemented")
}
func (UnimplementedInviteRequestServiceServer) FindAllInviteRequests(context.Context, *FindAllInviteRequestsRequest) (*FindAllInviteRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllInviteRequests not implemented")
}
func (UnimplementedInviteRequestServiceServer) FindInviteRequestById(context.Context, *FindInviteRequestByIdRequest) (*FindInviteRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInviteRequestById not implemented")
}
func (UnimplementedInviteRequestServiceServer) UpdateInviteRequest(context.Context, *UpdateInviteRequestRequest) (*UpdateInviteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInviteRequest not implemented")
}
func (UnimplementedInviteRequestServiceServer) DeleteInviteRequest(context.Context, *DeleteInviteRequestRequest) (*DeleteInviteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInviteRequest not implemented")
}
func (UnimplementedInviteRequestServiceServer) mustEmbedUnimplementedInviteRequestServiceServer() {}

// UnsafeInviteRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteRequestServiceServer will
// result in compilation errors.
type UnsafeInviteRequestServiceServer interface {
	mustEmbedUnimplementedInviteRequestServiceServer()
}

func RegisterInviteRequestServiceServer(s grpc.ServiceRegistrar, srv InviteRequestServiceServer) {
	s.RegisterService(&InviteRequestService_ServiceDesc, srv)
}

func _InviteRequestService_CreateInviteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRequestServiceServer).CreateInviteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteRequestService_CreateInviteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRequestServiceServer).CreateInviteRequest(ctx, req.(*CreateInviteRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteRequestService_FindAllInviteRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllInviteRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRequestServiceServer).FindAllInviteRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteRequestService_FindAllInviteRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRequestServiceServer).FindAllInviteRequests(ctx, req.(*FindAllInviteRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteRequestService_FindInviteRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInviteRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRequestServiceServer).FindInviteRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteRequestService_FindInviteRequestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRequestServiceServer).FindInviteRequestById(ctx, req.(*FindInviteRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteRequestService_UpdateInviteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInviteRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRequestServiceServer).UpdateInviteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteRequestService_UpdateInviteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRequestServiceServer).UpdateInviteRequest(ctx, req.(*UpdateInviteRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteRequestService_DeleteInviteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInviteRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteRequestServiceServer).DeleteInviteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteRequestService_DeleteInviteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteRequestServiceServer).DeleteInviteRequest(ctx, req.(*DeleteInviteRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteRequestService_ServiceDesc is the grpc.ServiceDesc for InviteRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invite_request.InviteRequestService",
	HandlerType: (*InviteRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInviteRequest",
			Handler:    _InviteRequestService_CreateInviteRequest_Handler,
		},
		{
			MethodName: "FindAllInviteRequests",
			Handler:    _InviteRequestService_FindAllInviteRequests_Handler,
		},
		{
			MethodName: "FindInviteRequestById",
			Handler:    _InviteRequestService_FindInviteRequestById_Handler,
		},
		{
			MethodName: "UpdateInviteRequest",
			Handler:    _InviteRequestService_UpdateInviteRequest_Handler,
		},
		{
			MethodName: "DeleteInviteRequest",
			Handler:    _InviteRequestService_DeleteInviteRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invite_request.proto",
}
